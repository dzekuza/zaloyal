{
  "rls_policies": [
    {
      "schemaname": "public",
      "tablename": "oauth_states",
      "policyname": "Users can delete their own OAuth states",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "DELETE",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to delete their own OAuth state records"
    },
    {
      "schemaname": "public",
      "tablename": "oauth_states",
      "policyname": "Users can insert their own OAuth states",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = user_id)",
      "description": "Allows users to insert their own OAuth state records"
    },
    {
      "schemaname": "public",
      "tablename": "oauth_states",
      "policyname": "Users can select their own OAuth states",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to view their own OAuth state records"
    },
    {
      "schemaname": "public",
      "tablename": "oauth_states",
      "policyname": "Users can update their own OAuth states",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "UPDATE",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to update their own OAuth state records"
    },
    {
      "schemaname": "public",
      "tablename": "project_members",
      "policyname": "Users can add themselves as members",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = user_id)",
      "description": "Allows users to add themselves as project members"
    },
    {
      "schemaname": "public",
      "tablename": "project_members",
      "policyname": "Users can remove themselves from a project",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "DELETE",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to remove themselves from project memberships"
    },
    {
      "schemaname": "public",
      "tablename": "project_members",
      "policyname": "Users can view their project memberships",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to view their project memberships"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Allow authenticated users to read all projects",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null,
      "description": "Allows authenticated users to read all projects"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Allow project owners to manage their projects",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "ALL",
      "qual": "((auth.uid())::text = (owner_id)::text)",
      "with_check": "((auth.uid())::text = (owner_id)::text)",
      "description": "Allows project owners full access to their projects"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Allow public read access to approved projects",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(status = 'approved'::text)",
      "with_check": null,
      "description": "Allows public read access to approved projects"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Allow service role full access",
      "permissive": "PERMISSIVE",
      "roles": ["service_role"],
      "cmd": "ALL",
      "qual": "true",
      "with_check": "true",
      "description": "Allows service role full access to projects"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Anyone can create a project",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = owner_id)",
      "description": "Allows anyone to create a project"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Project owners can delete their projects",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "DELETE",
      "qual": "(auth.uid() = owner_id)",
      "with_check": null,
      "description": "Allows project owners to delete their projects"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Project owners can update their projects",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "UPDATE",
      "qual": "(auth.uid() = owner_id)",
      "with_check": null,
      "description": "Allows project owners to update their projects"
    },
    {
      "schemaname": "public",
      "tablename": "projects",
      "policyname": "Project owners can view their projects",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = owner_id)",
      "with_check": null,
      "description": "Allows project owners to view their projects"
    },
    {
      "schemaname": "public",
      "tablename": "quest_categories",
      "policyname": "Allow authenticated users to read quest categories",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null,
      "description": "Allows authenticated users to read quest categories"
    },
    {
      "schemaname": "public",
      "tablename": "quest_categories",
      "policyname": "Allow project owners to create quest categories",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true",
      "description": "Allows project owners to create quest categories"
    },
    {
      "schemaname": "public",
      "tablename": "quest_categories",
      "policyname": "Allow project owners to delete quest categories",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "DELETE",
      "qual": "true",
      "with_check": null,
      "description": "Allows project owners to delete quest categories"
    },
    {
      "schemaname": "public",
      "tablename": "quest_categories",
      "policyname": "Allow project owners to update quest categories",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "UPDATE",
      "qual": "true",
      "with_check": "true",
      "description": "Allows project owners to update quest categories"
    },
    {
      "schemaname": "public",
      "tablename": "quest_categories",
      "policyname": "Allow service role full access to quest categories",
      "permissive": "PERMISSIVE",
      "roles": ["service_role"],
      "cmd": "ALL",
      "qual": "true",
      "with_check": "true",
      "description": "Allows service role full access to quest categories"
    },
    {
      "schemaname": "public",
      "tablename": "quests",
      "policyname": "Allow authenticated users to read all quests",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null,
      "description": "Allows authenticated users to read all quests"
    },
    {
      "schemaname": "public",
      "tablename": "quests",
      "policyname": "Allow project owners to delete quests",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "DELETE",
      "qual": "(EXISTS ( SELECT 1\n   FROM projects\n  WHERE ((projects.id = quests.project_id) AND ((projects.owner_id)::text = (auth.uid())::text))))",
      "with_check": null,
      "description": "Allows project owners to delete quests"
    },
    {
      "schemaname": "public",
      "tablename": "quests",
      "policyname": "Allow project owners to insert quests",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM projects\n  WHERE ((projects.id = quests.project_id) AND ((projects.owner_id)::text = (auth.uid())::text))))",
      "description": "Allows project owners to insert quests"
    },
    {
      "schemaname": "public",
      "tablename": "quests",
      "policyname": "Allow project owners to update quests",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "UPDATE",
      "qual": "(EXISTS ( SELECT 1\n   FROM projects\n  WHERE ((projects.id = quests.project_id) AND ((projects.owner_id)::text = (auth.uid())::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM projects\n  WHERE ((projects.id = quests.project_id) AND ((projects.owner_id)::text = (auth.uid())::text))))",
      "description": "Allows project owners to update quests"
    },
    {
      "schemaname": "public",
      "tablename": "quests",
      "policyname": "Allow public read access to active quests",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(status = 'active'::text)",
      "with_check": null,
      "description": "Allows public read access to active quests"
    },
    {
      "schemaname": "public",
      "tablename": "quests",
      "policyname": "Allow service role full access to quests",
      "permissive": "PERMISSIVE",
      "roles": ["service_role"],
      "cmd": "ALL",
      "qual": "true",
      "with_check": "true",
      "description": "Allows service role full access to quests"
    },
    {
      "schemaname": "public",
      "tablename": "social_accounts",
      "policyname": "Users can delete their own social accounts",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "DELETE",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to delete their own social accounts"
    },
    {
      "schemaname": "public",
      "tablename": "social_accounts",
      "policyname": "Users can insert their own social accounts",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = user_id)",
      "description": "Allows users to insert their own social accounts"
    },
    {
      "schemaname": "public",
      "tablename": "social_accounts",
      "policyname": "Users can update their own social accounts",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "UPDATE",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to update their own social accounts"
    },
    {
      "schemaname": "public",
      "tablename": "social_accounts",
      "policyname": "Users can view their social accounts",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to view their social accounts"
    },
    {
      "schemaname": "public",
      "tablename": "tasks",
      "policyname": "Project owners can delete tasks",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "DELETE",
      "qual": "(auth.uid() = ( SELECT projects.owner_id\n   FROM projects\n  WHERE (projects.id = ( SELECT quests.project_id\n           FROM quests\n          WHERE (quests.id = tasks.quest_id)))))",
      "with_check": null,
      "description": "Allows project owners to delete tasks"
    },
    {
      "schemaname": "public",
      "tablename": "tasks",
      "policyname": "Project owners can insert tasks",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = ( SELECT projects.owner_id\n   FROM projects\n  WHERE (projects.id = ( SELECT quests.project_id\n           FROM quests\n          WHERE (quests.id = tasks.quest_id)))))",
      "description": "Allows project owners to insert tasks"
    },
    {
      "schemaname": "public",
      "tablename": "tasks",
      "policyname": "Project owners can update tasks",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "UPDATE",
      "qual": "(auth.uid() = ( SELECT projects.owner_id\n   FROM projects\n  WHERE (projects.id = ( SELECT quests.project_id\n           FROM quests\n          WHERE (quests.id = tasks.quest_id)))))",
      "with_check": null,
      "description": "Allows project owners to update tasks"
    },
    {
      "schemaname": "public",
      "tablename": "tasks",
      "policyname": "Project owners can view tasks",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = ( SELECT projects.owner_id\n   FROM projects\n  WHERE (projects.id = ( SELECT quests.project_id\n           FROM quests\n          WHERE (quests.id = tasks.quest_id)))))",
      "with_check": null,
      "description": "Allows project owners to view tasks"
    },
    {
      "schemaname": "public",
      "tablename": "user_task_submissions",
      "policyname": "Users can create their own submissions",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = user_id)",
      "description": "Allows users to create their own task submissions"
    },
    {
      "schemaname": "public",
      "tablename": "user_task_submissions",
      "policyname": "Users can update their own submissions",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "UPDATE",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to update their own task submissions"
    },
    {
      "schemaname": "public",
      "tablename": "user_task_submissions",
      "policyname": "Users can view their own submissions",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null,
      "description": "Allows users to view their own task submissions"
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Allow public insert for signup",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true",
      "description": "Allows public insert for user signup"
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Users can update their own user row",
      "permissive": "PERMISSIVE",
      "roles": ["authenticated"],
      "cmd": "UPDATE",
      "qual": "(auth.uid() = id)",
      "with_check": null,
      "description": "Allows users to update their own user profile"
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Users can view their own user row",
      "permissive": "PERMISSIVE",
      "roles": ["public"],
      "cmd": "SELECT",
      "qual": "(auth.uid() = id)",
      "with_check": null,
      "description": "Allows users to view their own user profile"
    }
  ],
  "metadata": {
    "total_policies": 40,
    "schema": "public",
    "last_updated": "2025-01-27T00:00:00Z",
    "description": "Complete RLS policy definitions for the Zaloyal platform database"
  }
} 