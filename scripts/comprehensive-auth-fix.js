const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function comprehensiveAuthFix() {
  console.log('üîß Comprehensive Auth Fix:');
  console.log('‚ö†Ô∏è  This addresses all potential Auth issues!\n');
  
  const fixSQL = [
    "-- Comprehensive Auth Fix - Address all potential issues",
    "",
    "-- First, let's check if auth schema exists and is properly set up",
    "DO $$",
    "BEGIN",
    "  -- Create auth schema if it doesn't exist",
    "  IF NOT EXISTS (SELECT 1 FROM information_schema.schemata WHERE schema_name = 'auth') THEN",
    "    CREATE SCHEMA auth;",
    "  END IF;",
    "END $$;",
    "",
    "-- Create auth.users table if it doesn't exist (this is critical)",
    "CREATE TABLE IF NOT EXISTS auth.users (",
    "  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),",
    "  instance_id uuid,",
    "  aud text,",
    "  role text,",
    "  email text,",
    "  encrypted_password text,",
    "  email_confirmed_at timestamptz,",
    "  invited_at timestamptz,",
    "  confirmation_token text,",
    "  confirmation_sent_at timestamptz,",
    "  recovery_token text,",
    "  recovery_sent_at timestamptz,",
    "  email_change_token_new text,",
    "  email_change text,",
    "  email_change_sent_at timestamptz,",
    "  last_sign_in_at timestamptz,",
    "  raw_app_meta_data jsonb,",
    "  raw_user_meta_data jsonb,",
    "  is_super_admin boolean,",
    "  created_at timestamptz DEFAULT now(),",
    "  updated_at timestamptz DEFAULT now(),",
    "  phone text,",
    "  phone_confirmed_at timestamptz,",
    "  phone_change text,",
    "  phone_change_token text,",
    "  phone_change_sent_at timestamptz,",
    "  email_change_token_current text,",
    "  email_change_confirm_status smallint,",
    "  banned_until timestamptz,",
    "  reauthentication_sent_at timestamptz,",
    "  reauthentication_token text,",
    "  CONSTRAINT users_aud_check CHECK (aud = 'authenticated'),",
    "  CONSTRAINT users_role_check CHECK (role = 'authenticated')",
    ");",
    "",
    "-- Create public.users table if it doesn't exist",
    "CREATE TABLE IF NOT EXISTS public.users (",
    "  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,",
    "  email text,",
    "  username text,",
    "  avatar_url text,",
    "  role text DEFAULT 'participant',",
    "  total_xp integer DEFAULT 0,",
    "  level integer DEFAULT 1,",
    "  completed_quests integer DEFAULT 0,",
    "  bio text,",
    "  social_links jsonb DEFAULT '{}',",
    "  x_id text,",
    "  x_username text,",
    "  x_avatar_url text,",
    "  discord_id text,",
    "  discord_username text,",
    "  discord_avatar_url text,",
    "  telegram_id text,",
    "  telegram_username text,",
    "  telegram_avatar_url text,",
    "  created_at timestamptz DEFAULT now(),",
    "  updated_at timestamptz DEFAULT now()",
    ");",
    "",
    "-- Grant necessary permissions",
    "GRANT USAGE ON SCHEMA public TO anon, authenticated;",
    "GRANT USAGE ON SCHEMA auth TO anon, authenticated;",
    "GRANT ALL ON public.users TO anon, authenticated;",
    "GRANT ALL ON auth.users TO anon, authenticated;",
    "",
    "-- Enable RLS on users table",
    "ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;",
    "",
    "-- Create RLS policies for users table",
    "DROP POLICY IF EXISTS \"Users can view own profile\" ON public.users;",
    "DROP POLICY IF EXISTS \"Users can update own profile\" ON public.users;",
    "DROP POLICY IF EXISTS \"Users can insert own profile\" ON public.users;",
    "",
    "CREATE POLICY \"Users can view own profile\" ON public.users",
    "  FOR SELECT USING (auth.uid() = id);",
    "",
    "CREATE POLICY \"Users can update own profile\" ON public.users",
    "  FOR UPDATE USING (auth.uid() = id);",
    "",
    "CREATE POLICY \"Users can insert own profile\" ON public.users",
    "  FOR INSERT WITH CHECK (auth.uid() = id);",
    "",
    "-- Create updated_at trigger for users table",
    "CREATE OR REPLACE FUNCTION public.handle_updated_at()",
    "RETURNS trigger AS $$",
    "BEGIN",
    "  NEW.updated_at = now();",
    "  RETURN NEW;",
    "END;",
    "$$ LANGUAGE plpgsql;",
    "",
    "DROP TRIGGER IF EXISTS handle_users_updated_at ON public.users;",
    "CREATE TRIGGER handle_users_updated_at",
    "  BEFORE UPDATE ON public.users",
    "  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();",
    "",
    "-- Create function to get user profile",
    "CREATE OR REPLACE FUNCTION public.get_user_profile(user_id uuid DEFAULT auth.uid())",
    "RETURNS TABLE (",
    "  id uuid,",
    "  email text,",
    "  username text,",
    "  avatar_url text,",
    "  role text,",
    "  total_xp integer,",
    "  level integer,",
    "  completed_quests integer,",
    "  bio text,",
    "  social_links jsonb,",
    "  created_at timestamptz,",
    "  updated_at timestamptz",
    ") AS $$",
    "BEGIN",
    "  RETURN QUERY",
    "  SELECT",
    "    u.id,",
    "    u.email,",
    "    u.username,",
    "    u.avatar_url,",
    "    u.role,",
    "    u.total_xp,",
    "    u.level,",
    "    u.completed_quests,",
    "    u.bio,",
    "    u.social_links,",
    "    u.created_at,",
    "    u.updated_at",
    "  FROM public.users u",
    "  WHERE u.id = user_id;",
    "END;",
    "$$ LANGUAGE plpgsql SECURITY DEFINER;",
    "",
    "-- Grant execute permission",
    "GRANT EXECUTE ON FUNCTION public.get_user_profile TO authenticated;",
    "",
    "-- Create indexes for better performance",
    "CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);",
    "CREATE INDEX IF NOT EXISTS idx_users_username ON public.users(username);",
    "CREATE INDEX IF NOT EXISTS idx_auth_users_email ON auth.users(email);"
  ];

  console.log(fixSQL.join('\n'));
  console.log('\nüéâ Copy and paste the above SQL into your Supabase SQL Editor!');
  console.log('\nüìã This will:');
  console.log('1. Create the auth schema if missing');
  console.log('2. Create the auth.users table with all required columns');
  console.log('3. Create the public.users table with proper structure');
  console.log('4. Set up all necessary permissions and RLS policies');
  console.log('5. Create performance indexes');
  console.log('6. Fix the "Error creating identity" issue');
  console.log('\nüöÄ After applying this SQL, signup should work!');
  console.log('\n‚ö†Ô∏è  This is a comprehensive fix that addresses all potential Auth issues.');
}

comprehensiveAuthFix().catch(console.error); 