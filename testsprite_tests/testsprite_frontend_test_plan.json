[
  {
    "id": "TC001",
    "title": "Wallet Authentication - Ethereum",
    "description": "Verify that users can authenticate successfully using an Ethereum wallet and receive encrypted tokens for session management.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the authentication page."
      },
      {
        "type": "action",
        "description": "Select Ethereum wallet as authentication method."
      },
      {
        "type": "action",
        "description": "Connect and approve wallet in the wallet extension."
      },
      {
        "type": "assertion",
        "description": "Check that the user is logged in and receives an encrypted session token."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Wallet Authentication - Solana",
    "description": "Verify that users can authenticate successfully using a Solana wallet and receive encrypted tokens for session management.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the authentication page."
      },
      {
        "type": "action",
        "description": "Select Solana wallet as authentication method."
      },
      {
        "type": "action",
        "description": "Connect and approve wallet in the Solana wallet app."
      },
      {
        "type": "assertion",
        "description": "Check that the user is logged in and receives an encrypted session token."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Email Authentication with Verification",
    "description": "Validate that users can register using email, receive a verification email, verify their account, and login successfully.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the email registration page."
      },
      {
        "type": "action",
        "description": "Input valid email and password and submit the registration form."
      },
      {
        "type": "assertion",
        "description": "Check that a verification email is sent to the entered address."
      },
      {
        "type": "action",
        "description": "Simulate email verification link clicked by user."
      },
      {
        "type": "assertion",
        "description": "Confirm that the user account is marked verified."
      },
      {
        "type": "action",
        "description": "User logs in with verified email and password."
      },
      {
        "type": "assertion",
        "description": "Ensure login is successful and user session is established with encrypted tokens."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "OAuth Login and Linking - Twitter/X",
    "description": "Ensure users can authenticate and link existing accounts using Twitter/X OAuth provider securely.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Initiate login via Twitter/X OAuth."
      },
      {
        "type": "action",
        "description": "Complete OAuth authorization flow with Twitter/X."
      },
      {
        "type": "assertion",
        "description": "Verify successful login and user profile data is retrieved."
      },
      {
        "type": "action",
        "description": "Attempt to link Twitter/X OAuth account to an existing user account."
      },
      {
        "type": "assertion",
        "description": "Check that account linking succeeds and relevant tokens are updated securely."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Project Registration and Editing",
    "description": "Validate the project registration flow including form validation, data persistence, and editing by project owners.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the project registration page."
      },
      {
        "type": "action",
        "description": "Fill in project details with valid and invalid input values."
      },
      {
        "type": "assertion",
        "description": "Check that validation messages appear for invalid inputs and submission is prevented."
      },
      {
        "type": "action",
        "description": "Submit valid project registration form."
      },
      {
        "type": "assertion",
        "description": "Verify project data is persisted in the database and success message is shown."
      },
      {
        "type": "action",
        "description": "Navigate to project edit page as the owner."
      },
      {
        "type": "action",
        "description": "Update project information and submit."
      },
      {
        "type": "assertion",
        "description": "Confirm updated information is saved and reflected in project page."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Quest Creation with Multiple Task Types",
    "description": "Verify the creation of quests comprising varied task types such as social, download, visit, and quiz tasks with proper input validation.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to new quest creation form."
      },
      {
        "type": "action",
        "description": "Enter quest metadata including title, description, and project association."
      },
      {
        "type": "action",
        "description": "Add tasks of each type: social (follow/like), download, form submission, visit URL, quiz questions."
      },
      {
        "type": "action",
        "description": "Leave required fields empty and verify validation errors."
      },
      {
        "type": "action",
        "description": "Fill all task fields correctly and submit quest creation."
      },
      {
        "type": "assertion",
        "description": "Confirm that quest and tasks are stored correctly in the database and displayed appropriately."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Task Verification - Twitter Follow",
    "description": "Test real-time verification for 'follow' task on Twitter/X that confirms user actually followed the target handle.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User submits task completion for Twitter follow task."
      },
      {
        "type": "action",
        "description": "System calls Twitter API to verify if user follows the target account."
      },
      {
        "type": "assertion",
        "description": "If user follows, verify task is marked completed and XP awarded."
      },
      {
        "type": "assertion",
        "description": "If user does not follow, verify task remains incomplete and appropriate error message is shown."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Task Verification - Discord Server Join",
    "description": "Ensure the platform verifies Discord server join tasks in real-time using Discord API and updates task status accordingly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "User submits completion for Discord join task."
      },
      {
        "type": "action",
        "description": "System queries Discord API to confirm user membership in the required server."
      },
      {
        "type": "assertion",
        "description": "Task status updates to complete and XP awarded if membership confirmed."
      },
      {
        "type": "assertion",
        "description": "If membership is absent, task remains incomplete and user notified."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "User Dashboard - Quest Progress and XP Calculation",
    "description": "Check that the user dashboard displays quest progress accurately and that XP totals reflect completed tasks and quests dynamically.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as a user with ongoing quest participation."
      },
      {
        "type": "assertion",
        "description": "Verify quests in progress show accurate task completion statuses."
      },
      {
        "type": "assertion",
        "description": "Verify that XP total is correctly calculated and updated after completing tasks."
      },
      {
        "type": "action",
        "description": "Complete additional tasks and refresh dashboard."
      },
      {
        "type": "assertion",
        "description": "Verify updated progress and XP are immediately reflected."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Leaderboard Updates Based on XP",
    "description": "Ensure leaderboard ranks users correctly in real-time based on accumulated XP from quest completions.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Complete quests as a user to increase XP."
      },
      {
        "type": "action",
        "description": "Navigate to the leaderboard page."
      },
      {
        "type": "assertion",
        "description": "Verify user rank updates according to XP relative to other users."
      },
      {
        "type": "assertion",
        "description": "Verify tie cases and rank ordering is handled correctly."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Responsive Rendering of UI Components",
    "description": "Validate that all primary UI components render correctly and remain accessible on desktop, tablet, and mobile viewport sizes.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Load key pages (dashboard, project listing, quest detail) on desktop viewport."
      },
      {
        "type": "assertion",
        "description": "Verify all UI elements are visible, legible, and interactive."
      },
      {
        "type": "action",
        "description": "Resize viewport to common tablet dimensions."
      },
      {
        "type": "assertion",
        "description": "Check adaptive layout and that no content is clipped or misaligned."
      },
      {
        "type": "action",
        "description": "Switch to mobile viewport."
      },
      {
        "type": "assertion",
        "description": "Verify mobile navigation and bottom nav components function correctly and UI remains consistent."
      }
    ]
  },
  {
    "id": "TC012",
    "title": "File Upload - Quest Image and User Avatar",
    "description": "Verify file upload functionality for quest-related images and user avatars including validation, upload success, storage, and accessibility.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to quest image upload component and select valid image files."
      },
      {
        "type": "action",
        "description": "Submit image upload and monitor progress."
      },
      {
        "type": "assertion",
        "description": "Confirm image is uploaded to Supabase storage and displayed correctly."
      },
      {
        "type": "action",
        "description": "Repeat upload with unsupported file types and large file sizes."
      },
      {
        "type": "assertion",
        "description": "Verify appropriate validation error messages prevent upload."
      },
      {
        "type": "action",
        "description": "Perform avatar upload from user profile."
      },
      {
        "type": "assertion",
        "description": "Confirm avatar replaces previous image and updates across UI."
      }
    ]
  },
  {
    "id": "TC013",
    "title": "API Authorization and Input Validation",
    "description": "Test all critical API routes to ensure proper authorization checks and input validations are enforced preventing unauthorized access and invalid data entry.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Make API requests to protected endpoints without authentication."
      },
      {
        "type": "assertion",
        "description": "Verify API returns 401 Unauthorized or equivalent."
      },
      {
        "type": "action",
        "description": "Make API requests with malformed or missing required input fields."
      },
      {
        "type": "assertion",
        "description": "Confirm API returns validation error responses and does not process request."
      },
      {
        "type": "action",
        "description": "Make authenticated requests with valid and invalid input payloads."
      },
      {
        "type": "assertion",
        "description": "Verify that only valid data results in database changes and invalid ones are rejected."
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Security and Privacy Compliance Validation",
    "description": "Ensure the system adheres to GDPR compliance including secure token encryption, role-level security (RLS), and user data privacy controls.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Review token storage and transmission for encryption at rest and in transit."
      },
      {
        "type": "assertion",
        "description": "Verify tokens cannot be intercepted or decoded by unauthorized entities."
      },
      {
        "type": "action",
        "description": "Test RLS policies by simulating queries from unauthorized users."
      },
      {
        "type": "assertion",
        "description": "Confirm data access is restricted according to user roles and permissions."
      },
      {
        "type": "action",
        "description": "Test user data deletion and consent management requests."
      },
      {
        "type": "assertion",
        "description": "Verify compliance to GDPR requirements for data privacy."
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Error Handling - Authentication Failures",
    "description": "Validate proper error responses and user-facing messages are displayed when authentication fails due to invalid credentials or network issues.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt login with invalid wallet signature or revoked session."
      },
      {
        "type": "assertion",
        "description": "Ensure proper error messages are displayed to the user."
      },
      {
        "type": "action",
        "description": "Attempt email login with incorrect password."
      },
      {
        "type": "assertion",
        "description": "Confirm error message indicates invalid credentials."
      },
      {
        "type": "action",
        "description": "Simulate network failure during OAuth login."
      },
      {
        "type": "assertion",
        "description": "Verify user is informed about network error and can retry."
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Task Verification Failure Scenario Handling",
    "description": "Ensure the system handles API rate limiting, failures, and incorrect social media data gracefully during task verification.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate rate limiting error from Twitter API during follow verification."
      },
      {
        "type": "assertion",
        "description": "Verify task verification API returns a proper error response and user is notified appropriately."
      },
      {
        "type": "action",
        "description": "Simulate Discord API outage during server join verification."
      },
      {
        "type": "assertion",
        "description": "Confirm system retries or informs the user of inability to verify task."
      },
      {
        "type": "action",
        "description": "Inject invalid social media handles or tokens."
      },
      {
        "type": "assertion",
        "description": "Ensure validation prevents processing and user receives meaningful feedback."
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Account Management - Linking and Unlinking",
    "description": "Verify users can manage their linked wallet and social OAuth accounts including linking new accounts and unlinking existing ones securely.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Log in and navigate to account settings."
      },
      {
        "type": "action",
        "description": "Link a new wallet or social OAuth account."
      },
      {
        "type": "assertion",
        "description": "Check that the new account is linked and displayed in user profile."
      },
      {
        "type": "action",
        "description": "Unlink one of the linked accounts."
      },
      {
        "type": "assertion",
        "description": "Verify unlinking succeeds and user is notified."
      },
      {
        "type": "action",
        "description": "Attempt unlinking last authentication method."
      },
      {
        "type": "assertion",
        "description": "Ensure system prevents unlinking to avoid account lockout."
      }
    ]
  }
]
